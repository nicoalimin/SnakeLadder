[{"C:\\Users\\micha\\Documents\\app\\SnakeLadder\\src\\components\\ConnectedBoard.js":"1","C:\\Users\\micha\\Documents\\app\\SnakeLadder\\src\\actionCreators\\actionCreators.js":"2","C:\\Users\\micha\\Documents\\app\\SnakeLadder\\src\\reducers\\root.js":"3","C:\\Users\\micha\\Documents\\app\\SnakeLadder\\src\\constants\\boardMapOne.js":"4"},{"size":8759,"mtime":1606607667044,"results":"5","hashOfConfig":"6"},{"size":4622,"mtime":1606601916834,"results":"7","hashOfConfig":"6"},{"size":3231,"mtime":1606599254604,"results":"8","hashOfConfig":"6"},{"size":957,"mtime":1606599478922,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"1mm2wj0",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\micha\\Documents\\app\\SnakeLadder\\src\\components\\ConnectedBoard.js",["19","20","21"],"import {\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  Grid,\r\n  GridList,\r\n  GridListTile,\r\n  List,\r\n  ListItem,\r\n  ListSubheader,\r\n  Popover,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Draggable from \"react-draggable\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { asyncThunks } from \"../actionCreators/actionCreators\";\r\nimport { prompts } from \"../constants/prompts\";\r\nimport { gameActions, playersActions } from \"../reducers/root\";\r\nimport diceFive from \"../static/dice_five.svg\";\r\nimport diceFour from \"../static/dice_four.svg\";\r\nimport diceOne from \"../static/dice_one.svg\";\r\nimport diceSix from \"../static/dice_six.svg\";\r\nimport diceThree from \"../static/dice_three.svg\";\r\nimport diceTwo from \"../static/dice_two.svg\";\r\nimport logo from \"../static/logo.jpeg\";\r\nimport { store } from \"../store/store\";\r\n\r\nconst dices = [diceOne, diceTwo, diceThree, diceFour, diceFive, diceSix];\r\n\r\nconst DIMENSION_SIZE = 8;\r\n\r\nexport const Board = (props) => {\r\n  const [addPlayerNameInputValue, setAddPlayerNameInputValue] = useState(\"\");\r\n  const [isPopoverOpen, setIsPopoverOpen] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const diceValue = useSelector((state) => state.game.currentTurn.diceValue);\r\n  const players = useSelector((state) =>\r\n    Object.keys(state.game.playersState).map(\r\n      (playerId) => state.players[playerId]\r\n    )\r\n  );\r\n  const activePlayer = useSelector(\r\n    (state) => state.players[state.game.currentTurn.playerId]\r\n  );\r\n  const promptNumber = useSelector(\r\n    (state) => state.game.currentTurn.promptNumber\r\n  );\r\n  const promptMessage = useSelector(\r\n    (state) => state.board.prompts[promptNumber]\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(asyncThunks.simulateAGame());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (promptNumber) {\r\n      setIsPopoverOpen(true);\r\n    }\r\n  }, [promptNumber]);\r\n\r\n  const totalTiles = DIMENSION_SIZE * DIMENSION_SIZE;\r\n  const boxes = new Array(totalTiles).fill({}).map((_, id) => {\r\n    let count = totalTiles - id;\r\n    count +=\r\n      Math.floor((totalTiles - id - 1) / 8) % 2 === 0\r\n        ? -DIMENSION_SIZE + (id % DIMENSION_SIZE) * 2 + 1\r\n        : 0;\r\n    return (\r\n      <GridListTile\r\n        id={count}\r\n        className=\"ular-mabok-box\"\r\n      />\r\n    );\r\n  });\r\n\r\n  const peons = [];\r\n  const maxSize = 5;\r\n  for (let i = 0; i < maxSize; i++) {\r\n    for (let j = 0; j < maxSize; j++) {\r\n      const counter = i * maxSize + j;\r\n      if (counter >= players.length) break;\r\n      const currPlayer = players[counter];\r\n      const peon = (\r\n        <Draggable\r\n          defaultPosition={{ x: -(100 * i), y: -80 + 20 * i }}\r\n          grid={[100, 100]}\r\n          scale={1}\r\n          // onDragEnd={(elem, x, y, e) => {\r\n          //   console.log(elem)\r\n          //   console.log(x)\r\n          //   console.log(y)\r\n          //   console.log(e)\r\n          // }}\r\n        >\r\n          <Avatar\r\n            style={{\r\n              backgroundColor: currPlayer.color,\r\n              height: \"20px\",\r\n              width: \"20px\",\r\n              fontSize: \"12px\",\r\n            }}\r\n          >\r\n            {currPlayer?.name?.substring(0, 2)}\r\n          </Avatar>\r\n        </Draggable>\r\n      );\r\n      peons.push(peon);\r\n    }\r\n  }\r\n\r\n  const listItems = players.map((p, index) => {\r\n    return (\r\n      <ListItem\r\n        className=\"players\"\r\n        style={{ backgroundColor: activePlayer?.id === p.id && \"#71EB46\" }}\r\n      >\r\n        &nbsp;{index + 1}.&nbsp;\r\n        <Avatar\r\n          style={{\r\n            backgroundColor: p.color,\r\n            height: \"20px\",\r\n            width: \"20px\",\r\n            fontSize: \"12px\",\r\n          }}\r\n        >\r\n          {p.name.substring(0, 2)}\r\n        </Avatar>\r\n        &nbsp; - &nbsp;{p.name}\r\n      </ListItem>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Grid container className=\"ular-mabok\">\r\n        <Popover\r\n          className=\"ular-mabok-popover\"\r\n          open={isPopoverOpen}\r\n          onClose={() => setIsPopoverOpen(false)}\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"center\",\r\n          }}\r\n          transformOrigin={{\r\n            vertical: \"top\",\r\n            horizontal: \"center\",\r\n          }}\r\n        >\r\n          <Typography className=\"number\">#{promptNumber}</Typography>\r\n          <Typography className=\"text\">{promptMessage}</Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              dispatch(gameActions.nextTurn());\r\n              setIsPopoverOpen(false);\r\n            }}\r\n          >\r\n            Ok, Next Turn\r\n          </Button>\r\n        </Popover>\r\n        <Grid item xs={8}>\r\n          <Grid container item className=\"top-bar\">\r\n            <Grid item xs={10}>\r\n              {/* <Avatar src={logo} className=\"ular-mabok-logo\" /> */}\r\n              <TextField\r\n                className=\"ular-mabok-input\"\r\n                label=\"Add player\"\r\n                placeholder=\"Insert name here...\"\r\n                value={addPlayerNameInputValue}\r\n                margin=\"normal\"\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                variant=\"outlined\"\r\n                onChange={(e) => setAddPlayerNameInputValue(e.target.value)}\r\n                onKeyDown={(e) => {\r\n                  if (e.key === \"Enter\") {\r\n                    store.dispatch(\r\n                      playersActions.add({\r\n                        name: addPlayerNameInputValue,\r\n                        color: `#${Math.floor(\r\n                          Math.random() * 16777215\r\n                        ).toString(16)}`,\r\n                      })\r\n                    );\r\n                  }\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={2} className=\"ular-mabok-button-container\">\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className=\"ular-mabok-button\"\r\n                onClick={() => {\r\n                  store.dispatch(\r\n                    playersActions.add({\r\n                      name: addPlayerNameInputValue,\r\n                      color: `#${Math.floor(Math.random() * 16777215).toString(\r\n                        16\r\n                      )}`,\r\n                    })\r\n                  );\r\n                }}\r\n              >\r\n                Add Player\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <GridList\r\n              cols={8}\r\n              className=\"ular-mabok-board\"\r\n              style={{ margin: \"auto\" }}\r\n            >\r\n              {boxes}\r\n            </GridList>\r\n            <ul style={{ zIndex: 2, margin: \"auto\" }}>{peons}</ul>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          xs={2}\r\n          style={{ paddingLeft: \"10px\" }}\r\n          className=\"sidebar\"\r\n        >\r\n          <Grid item container xs={12} className=\"dice-roll\">\r\n            <Grid className=\"title\" xs={12}>\r\n              Roll Me!\r\n            </Grid>\r\n            <Grid\r\n              className=\"title\"\r\n              xs={12}\r\n              minHeight=\"50px\"\r\n            >\r\n              {!diceValue ? (\r\n                \"ðŸ¤”\"\r\n              ) : (\r\n                <img\r\n                  alt={`dice face with ${diceValue} dots.`}\r\n                  src={dices[diceValue - 1]}\r\n                  className=\"dices\"\r\n                />\r\n              )}\r\n            </Grid>\r\n            <Grid xs={12} container alignItems=\"center\" justify=\"center\">\r\n              <Typography variant=\"overline\">\r\n                It's {activePlayer?.name}'s turn.\r\n              </Typography>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                margin=\"auto\"\r\n                style={{ visibility: !diceValue ? \"visible\" : \"hidden\" }}\r\n                onClick={() => dispatch(asyncThunks.executeATurn())}\r\n              >\r\n                Roll\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid className=\"logo\">\r\n            <img alt=\"logo\" src={logo} />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          xs={2}\r\n          style={{ paddingLeft: \"10px\" }}\r\n          className=\"sidebar\"\r\n        >\r\n          <Grid item xs={12} className=\"leaderboard\">\r\n            <List\r\n              subheader={\r\n                <ListSubheader className=\"subheader\">Players</ListSubheader>\r\n              }\r\n            >\r\n              {listItems}\r\n            </List>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\micha\\Documents\\app\\SnakeLadder\\src\\actionCreators\\actionCreators.js",[],"C:\\Users\\micha\\Documents\\app\\SnakeLadder\\src\\reducers\\root.js",[],"C:\\Users\\micha\\Documents\\app\\SnakeLadder\\src\\constants\\boardMapOne.js",[],{"ruleId":"22","severity":1,"message":"23","line":3,"column":3,"nodeType":"24","messageId":"25","endLine":3,"endColumn":6},{"ruleId":"22","severity":1,"message":"26","line":19,"column":10,"nodeType":"24","messageId":"25","endLine":19,"endColumn":17},{"ruleId":"27","severity":1,"message":"28","line":57,"column":6,"nodeType":"29","endLine":57,"endColumn":8,"suggestions":"30"},"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'prompts' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["31"],{"desc":"32","fix":"33"},"Update the dependencies array to be: [dispatch]",{"range":"34","text":"35"},[1806,1808],"[dispatch]"]